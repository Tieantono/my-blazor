@*
    This component was created based on https://blazor-university.com.
    References:
    https://blazor-university.com/templating-components-with-renderfragements/creating-a-tabcontrol/
    https://blazor-university.com/templating-components-with-renderfragements/passing-data-to-a-renderfragement/
*@

<ul class="nav nav-pills tab-panel">
    @foreach (var tab in Tabs)
    {
        <li class="nav-item @GetActiveNavClass(tab)">
            <div class="d-flex">
                <a href="#"
                   @onclick="() => ActivateTab(tab)"
                   @onclick:preventDefault
                   class="nav-link">
                    @tab.Title
                </a>

                @if (Tabs.Count > 1 || Static == false)
                {
                    <button type="button" aria-label="Close"
                            @onclick="() => CloseTab(tab)">
                        <span aria-hidden="true">&times;</span>
                    </button>
                }
            </div>
        </li>
    }

    @if (Static == false)
    {
        <li class="d-flex">
            <button type="button" @onclick="AddNewTab" class="btn btn-success">
                <i class="fas fa-plus"></i>
            </button>
        </li>
    }
</ul>

<CascadingValue Value="this">
    @foreach (var tab in Tabs)
    {
        if (ActiveTab == tab)
        {
            @TabContent(tab.Item)
        }
    }
</CascadingValue>

@typeparam TItem
@code {
    /// <summary>
    /// List of tab objects.
    /// </summary>
    [Parameter]
    public List<TabItem<TItem>> Tabs { get; set; }

    /// <summary>
    /// Tab content to be rendered.
    /// </summary>
    [Parameter]
    public RenderFragment<TItem> TabContent { get; set; }

    /// <summary>
    /// Gets or sets whether the tab should be static, alias not dynamic.
    /// </summary>
    [Parameter]
    public bool Static { get; set; }

    /// <summary>
    /// On click add event callback. Will return the count of the current tabs + 1.
    /// </summary>
    [Parameter]
    public EventCallback<int> OnClickAdd { get; set; }

    /// <summary>
    /// Gets or sets the active tab object. Used for flagging which tab is active.
    /// </summary>
    public TabItem<TItem> ActiveTab { get; set; }

    protected override void OnInitialized()
    {
        if (Tabs == null)
        {
            throw new NullReferenceException($"{nameof(Tabs)} property cannot be null. Please assign the parameter");
        }

        ActiveTab = Tabs.FirstOrDefault();
    }

    /// <summary>
    /// Set the title text.
    /// </summary>
    /// <param name="newTitle"></param>
    public void SetTitle(string newTitle)
    {
        this.ActiveTab.Title = newTitle;

        StateHasChanged();
    }

    /// <summary>
    /// Get the active nav CSS class.
    /// </summary>
    /// <param name="tab"></param>
    /// <returns></returns>
    private string GetActiveNavClass(TabItem<TItem> tab)
    {
        return tab == ActiveTab ? "active" : "";
    }

    /// <summary>
    /// Activate the clicked / selected tab as active.
    /// </summary>
    /// <param name="tab"></param>
    private void ActivateTab(TabItem<TItem> tab)
    {
        this.ActiveTab = tab;
    }

    /// <summary>
    /// Handle the event on click add new tab button.
    /// </summary>
    /// <returns></returns>
    private async Task AddNewTab()
    {
        await this.OnClickAdd.InvokeAsync(this.Tabs.Count + 1);
    }

    /// <summary>
    /// Handle the event on click close tab button.
    /// </summary>
    /// <param name="tab"></param>
    private void CloseTab(TabItem<TItem> tab)
    {
        if (this.ActiveTab == tab)
        {
            this.Tabs.Remove(tab);

            this.ActiveTab = Tabs.FirstOrDefault();
        }
        else
        {
            this.Tabs.Remove(tab);
        }
    }
}
