<h3>Tab Control</h3>

@*<div class="btn btn-group" role="group">
        @foreach (var tabPage in Pages)
        {
            <button type="button"
                    class="btn @GetButtonClass(tabPage)"
                    @onclick="() => ActivatePage(tabPage)">
                @tabPage.Text
            </button>
        }
    </div>*@

<CascadingValue Value="this">
    <ul class="nav nav-pills tab-panel">
        @foreach (var tabPage in Pages)
        {
            <li class="nav-item @GetActiveNavClass(tabPage)">
                <div class="d-flex">
                    <a href="#"
                       @onclick="() => ActivatePage(tabPage)"
                       @onclick:preventDefault
                       class="nav-link">
                        @*@tabPage.Text*@
                    </a>

                    @if (Static == false)
                    {
                        <button type="button" aria-label="Close"
                                @onclick="() => ClosePage(tabPage)">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    }
                </div>
            </li>
        }
        <li class="d-flex">
            <button class="btn btn-success">
                <i class="fas fa-plus"></i>
            </button>
        </li>
    </ul>

    @*@Tabs*@
</CascadingValue>

@*@typeparam TItem*@ 
@code {

    [Parameter]
    public RenderFragment Tabs { get; set; }

    [Parameter]
    public RenderFragment<TabPage> TabTextTemplate { get; set; }

    [Parameter]
    public bool Static { get; set; }

    public TabPage ActivePage { get; set; }

    private List<TabPage> Pages { get; set; } = new List<TabPage>();

    protected override void OnInitialized()
    {
    }

    public void AddPage(TabPage tabPage)
    {
        Pages.Add(tabPage);
        if (Pages.Count == 1)
        {
            ActivePage = tabPage;
        }

        StateHasChanged();
    }

    private string GetButtonClass(TabPage tabPage)
    {
        return tabPage == ActivePage ? "btn-primary" : "btn-secondary";
    }

    private string GetActiveNavClass(TabPage page)
    {
        return page == ActivePage ? "active" : "";
    }

    private void ActivatePage(TabPage page)
    {
        ActivePage = page;
    }

    private void ClosePage(TabPage page)
    {
        if (this.ActivePage == page)
        {
            this.Pages.Remove(page);
            this.ActivePage = Pages.FirstOrDefault();
        }
        else
        {
            this.Pages.Remove(page);
        }

        StateHasChanged();
    }
}
